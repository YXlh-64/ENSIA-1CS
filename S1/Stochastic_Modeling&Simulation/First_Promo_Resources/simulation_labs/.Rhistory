fortune_initiale <- 40
jeux <- function(p, gain, perte) {
fortune <- fortune_initiale
while (fortune < 80 && fortune > 0) {  # Use && instead of ||
u <- runif(1, min = 0, max = 1)
if (u <= p) {
fortune = fortune + gain
} else {
fortune = fortune - perte
}
}
cat("fortune totale :", fortune, "\n")
}
jeux(3/4, 10, 10)
jeux(3/4, 10, 20)
jeux(3/4, 20, 10)
help("log")
Game <- function(G,G1,P1,p,F){
i=0
while(G>0 & G<F){
u=runif(1)
u <- ifelse(u<p,0,1)
ifelse(u=1,G<- G+G1,G<- G-P1 )
i=i+1
}
paste("nombre de jeux effectués",i)
}
Game(40,70,10,1/2,80)
Game <- function(G,G1,P1,p,F){
i=0
while(G>0 & G<F){
u=runif(1)
u <- ifelse(u<p,0,1)
ifelse(u=1,G= G+G1,G= G-P1 )
i=i+1
}
paste("nombre de jeux effectués",i)
}
Game(40,70,10,1/2,80)
Game <- function(G,G1,P1,p,F){
i=0
while(G>0 & G<F){
u=runif(1)
u <- ifelse(u<p,0,1)
ifelse(u==1,G= G+G1,G= G-P1 )
i=i+1
}
paste("nombre de jeux effectués",i)
}
Game(40,70,10,1/2,80)
Game <- function(G,G1,P1,p,F){
i=0
while(G>0 & G<F){
u=runif(1)
u <- ifelse(u<p,0,1)
ifelse(u==1,G= G+G1,G= G-P1 )
i=i+1
}
paste("nombre de jeux effectués",i)
}
Game(40,70,10,1/2,80)
Game <- function(G,G1,P1,p,F){
i=0
while(G>0 & G<F){
u=runif(1)
u <- ifelse(u<p,0,1)
ifelse(u==1,G <- G+G1, G <- G-P1 )
i=i+1
}
paste("nombre de jeux effectués",i)
}
Game(40,70,10,1/2,80)
Game <- function(G,G1,P1,p,F){
i=0
while(G>0 & G<F){
u=runif(1)
u <- ifelse(u<p,0,1)
ifelse(u==1,G <- G+G1, G <- G-P1 )
i=i+1
}
paste("nombre de jeux effectués",i)
}
Game(40,70,10,1/2,80)
Pareto <- function(alpha, beta ){
u <- runif(1)
x = alpha - beta*log(1/u-1)
return  x
Pareto <- function(alpha, beta ){
u <- runif(1)
x <- alpha - beta*log(1/u-1)
return  x
Pareto <- function(alpha, beta){
u <- runif(1)
x <- alpha - beta*log(1/u-1)
return  (x)
}
Pareto(1,1)
Logistic <- function(alpha, beta){
u <- runif(n)
x <- alpha - beta*log(1/u-1)
return  (x)
}
Logistic(1,1)
Logistic <- function(alpha, beta,n){
u <- runif(n)
x <- alpha - beta*log(1/u-1)
return  (x)
}
Logistic(1,1,10)
help("rlogis")
X <- Logistic(1,1,10)
Logistic <- function(alpha, beta,n){
u <- runif(n)
x <- alpha - beta*log(1/u-1)
return  (x)
}
X <- Logistic(1,1,10)
X
hist(X,breaks = 10,col="red")
hist(rlogis(X,1,1),add=TRUE,col="green",breaks=10)
help(rlogis)
Logistic <- function(alpha, beta,n){
u <- runif(n)
x <- alpha - beta*log(1/u-1)
return  (x)
}
X <- Logistic(1,1,10^4)
hist(X,breaks = 10,col="red")
hist(rlogis(10^4,1,1),add=TRUE,col="green",breaks=10)
X <- Logistic(1,1,10^4)
#verification (test of uniformity) => we use kolmogorov since it is continuous dist
#graphique
hist(X,breaks = 10,col="red")
hist(rlogis(10^4,1,1),add=TRUE,col="green",breaks=10)
X <- Logistic(1,1,10^4)
#verification (test of uniformity) => we use kolmogorov since it is continuous dist
#graphique
hist(X,breaks = 10,col="red")
hist(rlogis(10^4,1,1),add=TRUE,col="green",breaks=10)
X <- Logistic(1,1,10^4)
#verification (test of uniformity) => we use kolmogorov since it is continuous dist
#graphique
hist(X,breaks = 10,col="red")
hist(rlogis(10^4,1,1),add=TRUE,col="green",breaks=10)
help("ks.test")
hist(X,breaks = 10,col="purple")
hist(rlogis(10^4,1,1),add=TRUE,col="green",breaks=10)
hist(X,breaks = 10,col="purple")
hist(rlogis(10^4,1,1),add=TRUE,col="blue",breaks=10)
p <- ks.test(X,"plogis",1,1)
alpha_theorirtrical <- 0.05
if(p<alpha_theorirtrical){
paste("X follows the same logistic distribution")
}else{
print("X does not follow the same distribution")
}
p <- ks.test(X,"plogis",1,1)
alpha_theorirtrical <- 0.05
if(p>alpha_theorirtrical){
paste("X follows the same logistic distribution")
}else{
print("X does not follow the same distribution")
}
D,p <- ks.test(X,"plogis",1,1)
p_result <- ks.test(X, "plogis", 1, 1)
p_value <- p_result$p.value
alpha_theoretical <- 0.05
if (p_value > alpha_theoretical) {
print("X follows the same logistic distribution")
} else {
print("X does not follow the same distribution")
}
p_result
p_result <- ks.test(X, "plogis", 1, 1)
print(p_value <- p_result$p.value)
alpha_theoretical <- 0.05
if (p_value > alpha_theoretical) {
print("X follows the same logistic distribution")
} else {
print("X does not follow the same distribution")
}
Y <- Logistic(10^4,3,1)
Y
Y <- Logistic(10,3,1)
Y
if(mean(X1)==alpha)
{
print("it is true")
}
if(mean(X)==alpha)
{
print("it is true")
}
help(sum)
Erlang <- function(lambda,range,n){
for(i in 1:range ){
u1 <- runif(range)
x <- -1/lambda*log(1-u1)
y <- sum(x)
}
return y
Erlang <- function(lambda,range,n){
for(i in 1:range ){
u1 <- runif(range)
x <- -1/lambda*log(1-u1)
y <- sum(x)
}
return (y)
}
y
print(Erlang(4,2,10))
help("gamma")
Erlang <- function(lambda,range,n){
for(i in 1:n ){
u1 <- runif(range)
x <- -1/lambda*log(1-u1)
y <- sum(x)
}
return (y)
}
print(Erlang(4,2,10))
Erlang <- function(lambda,range,n){
for(i in 1:n ){
u1 <- runif(range)
x <- -1/lambda*log(1-u1)
y[i] <- sum(x)
}
return (y)
}
print(Erlang(4,2,10))
Erlang <- function(lambda,range,n){
for(i in 1:n ){
u1 <- runif(range)
x <- -1/lambda*log(1-u1)
y[i] <- sum(x)
}
return (y[i])
}
print(Erlang(4,2,10))
Erlang <- function(lambda,range,n){
for(i in 1:n ){
u1 <- runif(range)
x <- -1/lambda*log(1-u1)
y[i] <- x
}
return (y[i])
}
print(Erlang(4,2,10))
Erlang <- function(lambda,range,n){
for(i in 1:n ){
u1 <- runif(range)
x <- -1/lambda*sum(log(1-u1))
y[i] <- x
}
return (y[i])
}
print(Erlang(4,2,10))
Erlang <- function(lambda,range,n){
for(i in 1:n ){
u1 <- runif(range)
x <- -1/lambda*sum(log(1-u1))
y[i] <- x
return (y[i])
}
}
print(Erlang(4,2,10))
Erlang <- function(lambda,range,n){
x<- c()
for(i in 1:n ){
u <- runif(range)
x <- -1/lambda*sum(log(1-u))
}
x
}
Erlang <- function(lambda,range,n){
x<- c()
for(i in 1:n ){
u <- runif(range)
x <- -1/lambda*sum(log(1-u))
}
x
}
x1<- Erlang(4,2,10^4)
Erlang <- function(lambda,range,n){
x<- c()
for(i in 1:n ){
u <- runif(range)
x <- -1/lambda*sum(log(1-u))
}
x
}
#on a obtenu lamba fe erlang = range/lambda de l'expo
x1<- Erlang(4,1/2,10^4)
x2 <- rgamma(10^4,shape=4,rate=1/2)
hist(x1,nclass=10,col="green")
hist(x2,nclass=10,add=T)
ks.test(x1,x2)
ks.test(x1,"pgamma",4,1/2)
x1<- Erlang(4,1/2,10^4)
x2 <- rgamma(10^4,shape=4,rate=2)
hist(x1,nclass=10,col="green")
hist(x2,nclass=10,add=T)
ks.test(x1,x2)
ks.test(x1,"pgamma",4,1/2)
x1<- Erlang(4,1/2,10^4)
x2 <- rgamma(10^4,shape=4,scale=1/2)
hist(x1,nclass=10,col="green")
hist(x2,nclass=10,add=T)
ks.test(x1,x2)
ks.test(x1,"pgamma",4,1/2)
